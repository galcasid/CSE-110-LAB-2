{"ast":null,"code":"var _jsxFileName = \"/Users/giannaalcasid/my-app/src/hooksExercise.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n// think of useState as giving your component a memory which persists bw re-renders\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ClickCounter() {\n  _s();\n  // export added in by vscode\n  const [count, setCount] = useState(0);\n  // ^This line does two things:\n  // It creates a state variable (state) with an initial value.\n  // It provides a function (setState) to update that state\n\n  const handleClick = () => {\n    setCount(count + 1);\n  };\n\n  // updates document title (title u see in the tab)\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  }, [count]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Clicks: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Click me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n// think of useEffect as a way to synchronize your component w an external system\n// or to perform actions after the component renders\n// key points:\n// 1. the 1st arg is a func containing the code for your side effects\n// 2. this fun runs by default after every render of your component\n// 3. the 2nd arg will only run when these dependencies change\n// 4. if passing an empty array[], effect runs only once (after initial render)\n// 5. if ^ omitted, effect runs after every render\n_s(ClickCounter, \"/xL7qdScToREtqzbt5GZ1kHtYjQ=\");\n_c = ClickCounter;\nvar _c;\n$RefreshReg$(_c, \"ClickCounter\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ClickCounter","_s","count","setCount","handleClick","document","title","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/giannaalcasid/my-app/src/hooksExercise.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n// think of useState as giving your component a memory which persists bw re-renders\n\nexport function ClickCounter() { // export added in by vscode\n  const [count, setCount] = useState(0);\n  // ^This line does two things:\n  // It creates a state variable (state) with an initial value.\n  // It provides a function (setState) to update that state\n\n\n  const handleClick = () => {\n    setCount(count + 1);\n  };\n\n  // updates document title (title u see in the tab)\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  }, [count]);\n\n  return (\n    <div>\n      <p>Clicks: {count}</p>\n      <button onClick={handleClick}>Click me!</button>\n    </div>\n  );\n}\n\n// think of useEffect as a way to synchronize your component w an external system\n// or to perform actions after the component renders\n// key points:\n// 1. the 1st arg is a func containing the code for your side effects\n// 2. this fun runs by default after every render of your component\n// 3. the 2nd arg will only run when these dependencies change\n// 4. if passing an empty array[], effect runs only once (after initial render)\n// 5. if ^ omitted, effect runs after every render"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,OAAO,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAAE;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACrC;EACA;EACA;;EAGA,MAAMO,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EACrB,CAAC;;EAED;EACAN,SAAS,CAAC,MAAM;IACdS,QAAQ,CAACC,KAAK,GAAG,eAAeJ,KAAK,QAAQ;EAC/C,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACEH,OAAA;IAAAQ,QAAA,gBACER,OAAA;MAAAQ,QAAA,GAAG,UAAQ,EAACL,KAAK;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBZ,OAAA;MAAQa,OAAO,EAAER,WAAY;MAAAG,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAV,EAAA,CA/BgBD,YAAY;AAAAa,EAAA,GAAZb,YAAY;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}