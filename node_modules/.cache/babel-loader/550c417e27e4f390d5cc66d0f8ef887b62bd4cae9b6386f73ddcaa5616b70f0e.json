{"ast":null,"code":"var _jsxFileName = \"/Users/giannaalcasid/my-app/src/hooksExercise.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n// think of useState as giving your component a memory which persists bw re-renders\nimport { themeContext, themes } from \"./themeContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ClickCounter() {\n  _s();\n  // export added in by vscode\n  const [count, setCount] = useState(0);\n  // ^This line does two things:\n  // It creates a state variable (state) with an initial value.\n  // It provides a function (setState) to update that state\n\n  const handleClick = () => {\n    setCount(count + 1);\n  };\n\n  // updates document title (title u see in the tab)\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  }, [count]);\n  const theme = useContext(ThemeContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: theme.background,\n      color: theme.foreground,\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You clicked \", count, \" times \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      style: {\n        background: theme.foreground,\n        color: theme.background\n      },\n      children: \"Click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 4\n  }, this);\n  /*\n  return (\n  <div>\n   <p>Clicks: {count}</p>\n   <button onClick={handleClick}>Click me!</button>\n  </div>\n  );\n  */\n}\n\n// think of useEffect as a way to synchronize your component w an external system\n// or to perform actions after the component renders\n// key points:\n// 1. the 1st arg is a func containing the code for your side effects\n// 2. this fun runs by default after every render of your component\n// 3. the 2nd arg will only run when these dependencies change\n// 4. if passing an empty array[], effect runs only once (after initial render)\n// 5. if ^ omitted, effect runs after every render\n\n// Wrapper component to provide context\n_s(ClickCounter, \"QwTh87uW/LikTGP2WSDizL9Txl8=\");\n_c = ClickCounter;\nfunction ToggleTheme() {\n  _s2();\n  const [currentTheme, setCurrentTheme] = useState(themes.light);\n  const toggleTheme = () => {\n    setCurrentTheme(currentTheme === themes.light ? themes.dark : themes.light);\n  };\n  return /*#__PURE__*/_jsxDEV(themeContext.Provider, {\n    value: currentTheme,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleTheme,\n      children: \" Toggle Theme \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ClickCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 7\n  }, this);\n}\n_s2(ToggleTheme, \"XUkQGtkba25k8FAF8WwW2uStAco=\");\n_c2 = ToggleTheme;\nexport default ToggleTheme;\nvar _c, _c2;\n$RefreshReg$(_c, \"ClickCounter\");\n$RefreshReg$(_c2, \"ToggleTheme\");","map":{"version":3,"names":["React","useEffect","useState","themeContext","themes","jsxDEV","_jsxDEV","ClickCounter","_s","count","setCount","handleClick","document","title","theme","useContext","ThemeContext","style","background","color","foreground","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","ToggleTheme","_s2","currentTheme","setCurrentTheme","light","toggleTheme","dark","Provider","value","_c2","$RefreshReg$"],"sources":["/Users/giannaalcasid/my-app/src/hooksExercise.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n// think of useState as giving your component a memory which persists bw re-renders\nimport { themeContext, themes } from \"./themeContext\";\n\nexport function ClickCounter() { // export added in by vscode\n  const [count, setCount] = useState(0);\n  // ^This line does two things:\n  // It creates a state variable (state) with an initial value.\n  // It provides a function (setState) to update that state\n\n\n  const handleClick = () => {\n    setCount(count + 1);\n  };\n\n  // updates document title (title u see in the tab)\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  }, [count]);\n\n  const theme = useContext(ThemeContext);\n    return (\n   <div\n     style={{\n       background: theme.background,\n       color: theme.foreground,\n       padding: \"20px\",\n     }}\n   >\n     <p>You clicked {count} times </p>\n     <button\n       onClick={() => setCount(count + 1)}\n       style={{ background: theme.foreground, color: theme.background }}\n     >\n       Click me\n     </button>\n   </div>\n );\n     /*\n  return (\n    <div>\n      <p>Clicks: {count}</p>\n      <button onClick={handleClick}>Click me!</button>\n    </div>\n  );\n  */\n}\n\n// think of useEffect as a way to synchronize your component w an external system\n// or to perform actions after the component renders\n// key points:\n// 1. the 1st arg is a func containing the code for your side effects\n// 2. this fun runs by default after every render of your component\n// 3. the 2nd arg will only run when these dependencies change\n// 4. if passing an empty array[], effect runs only once (after initial render)\n// 5. if ^ omitted, effect runs after every render\n\n// Wrapper component to provide context\nfunction ToggleTheme() {\n    const [currentTheme, setCurrentTheme] = useState(themes.light);\n   \n    const toggleTheme = () => {\n      setCurrentTheme(currentTheme === themes.light ? themes.dark : themes.light);\n    };\n   \n    return (\n      <themeContext.Provider value={currentTheme}>\n        <button onClick={toggleTheme}> Toggle Theme </button>\n        <ClickCounter />\n      </themeContext.Provider>\n    );\n   }\n   \n   export default ToggleTheme;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD;AACA,SAASC,YAAY,EAAEC,MAAM,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,OAAO,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAAE;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC;EACA;EACA;;EAGA,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACxBD,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EACrB,CAAC;;EAED;EACAR,SAAS,CAAC,MAAM;IACdW,QAAQ,CAACC,KAAK,GAAG,eAAeJ,KAAK,QAAQ;EAC/C,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMK,KAAK,GAAGC,UAAU,CAACC,YAAY,CAAC;EACpC,oBACDV,OAAA;IACEW,KAAK,EAAE;MACLC,UAAU,EAAEJ,KAAK,CAACI,UAAU;MAC5BC,KAAK,EAAEL,KAAK,CAACM,UAAU;MACvBC,OAAO,EAAE;IACX,CAAE;IAAAC,QAAA,gBAEFhB,OAAA;MAAAgB,QAAA,GAAG,cAAY,EAACb,KAAK,EAAC,SAAO;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACjCpB,OAAA;MACEqB,OAAO,EAAEA,CAAA,KAAMjB,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAE;MACnCQ,KAAK,EAAE;QAAEC,UAAU,EAAEJ,KAAK,CAACM,UAAU;QAAED,KAAK,EAAEL,KAAK,CAACI;MAAW,CAAE;MAAAI,QAAA,EAClE;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;EAEJ;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAlB,EAAA,CArDgBD,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAsD5B,SAASsB,WAAWA,CAAA,EAAG;EAAAC,GAAA;EACnB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAG9B,QAAQ,CAACE,MAAM,CAAC6B,KAAK,CAAC;EAE9D,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBF,eAAe,CAACD,YAAY,KAAK3B,MAAM,CAAC6B,KAAK,GAAG7B,MAAM,CAAC+B,IAAI,GAAG/B,MAAM,CAAC6B,KAAK,CAAC;EAC7E,CAAC;EAED,oBACE3B,OAAA,CAACH,YAAY,CAACiC,QAAQ;IAACC,KAAK,EAAEN,YAAa;IAAAT,QAAA,gBACzChB,OAAA;MAAQqB,OAAO,EAAEO,WAAY;MAAAZ,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACrDpB,OAAA,CAACC,YAAY;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B;AAACI,GAAA,CAbKD,WAAW;AAAAS,GAAA,GAAXT,WAAW;AAejB,eAAeA,WAAW;AAAC,IAAAD,EAAA,EAAAU,GAAA;AAAAC,YAAA,CAAAX,EAAA;AAAAW,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}